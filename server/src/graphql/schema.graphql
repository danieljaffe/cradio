# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  # Returns the logged-in user making the query, or null if anonymous.
  self: User

  surveys: [Survey!]!
  survey(surveyId: Int!): Survey
  artist(name: String!): Artist
  listeningSession(sessionId: Int!): ListeningSession
  sessionQueue(sessionId: Int!): [Queue!]! #return list of all songs in session queue
  partyRockers: [PartyRocker!]!
  song(songName: String!): [Song!]!
  songs: [Song!]!
}

type Mutation {
  # Records an answer to a survey question presented in class.
  answerSurvey(input: SurveyInput!): Boolean!

  # Moves the survey to the next question (or starts it if it hasn't started). ADMIN only.
  nextSurveyQuestion(surveyId: Int!): Survey

  #add song to master queue with currrent session id
  addToQueue(input: QueueInfo!): Boolean!

  createPartyRocker(input: PartyRockerInfo!): PartyRocker!

  createListeningSession(partyRockerId: Int!): ListeningSession!

  joinListeningSession(input: JoinSessionInfo!): Boolean!

  deleteListeningSession(sessionId: Int!): Boolean!
}

type Subscription {
  surveyUpdates(surveyId: Int!): Survey

  queueUpdates(sessionId: Int!): Queue
}

type User {
  id: Int!
  userType: UserType!
  email: String!
  name: String!
}

type Song {
  id: Int!
  name: String!
  genre: String!
  duration: Int!
  artist: Artist!
}

type Artist {
  id: Int!
  name: String!
  origin: String
  songs: [Song]!
}

#time created is time in seconds since epoch
type ListeningSession {
  id: Int!
  timeCreated: Int!
  queueLength: Int!
  owner: PartyRocker!
  partyRockers: [PartyRocker!]!
  queue: [Queue!]
}

type PartyRocker {
  id: Int!
  name: String!
  spotifyCreds: String
  listeningSession: ListeningSession
}

type Queue {
  id: Int!
  score: Int!
  position: Int!
  song: Song!
  listeningSession: ListeningSession!
}

enum UserType {
  ADMIN
  USER
}

type Survey {
  id: Int!

  # Pretty name for the survey.
  name: String!

  # True if the survey has started.
  isStarted: Boolean!

  # True if the survey has completed.
  isCompleted: Boolean!

  # The current survey question, or null if the survey hasn't started.
  currentQuestion: SurveyQuestion

  # All the survey's questions, in presentation order.
  questions: [SurveyQuestion]!
}

type SurveyQuestion {
  id: Int!

  # The prompt, e.g. "how long have you been programming".
  prompt: String!

  # The choices available if multiple choice, null if not multiple choice.
  choices: [String!]

  # All answers received so far for the question.
  answers: [SurveyAnswer!]!

  # The Survey that this question is on.
  survey: Survey!
}

type SurveyAnswer {
  id: Int!
  answer: String!
  question: SurveyQuestion!
}

input SurveyInput {
  questionId: Int!
  answer: String!
}

input QueueInfo {
  songId: Int!
  listeningSessionId: Int!
}

input PartyRockerInfo {
  name: String!
}

input JoinSessionInfo {
  partyRockerId: Int!
  sessionId: Int!
}
